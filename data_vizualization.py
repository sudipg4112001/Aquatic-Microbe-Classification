# -*- coding: utf-8 -*-
"""Data Vizualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JmXQXUAqf5LffCINwU0phQne432V4MTV
"""

import numpy as np 
import pandas as pd 
import os
os.listdir("../input/aquamicrobe/Aqualitas_100taxa")

from tensorflow.keras.layers import Input, Flatten, Dense, Conv2D, Lambda, MaxPooling2D, Conv2D,MaxPool2D,Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt
import cv2

IMG_SIZE = 64
category = ['Aulacoseira_subarctica',
 'Cyclotella_atomus',
 'Nitzschia_tropica',
 'Achnanthidium_caravelense',
 'Epithemia_adnata',
 'Nitzschia_frustulum_var_frustulum',
 'Achnanthidium_exile',
 'Nitzschia_umbonata',
 'Gomphonema_micropumilum',
 'Amphora_pediculus',
 'Cocconeis_pediculus',
 'Gomphonema_micropus',
 'Aulacoseira_granulata',
 'Achnanthidium_catenatum',
 'Achnanthidium_rivulare',
 'Staurosira_venter',
 'Achnanthes_subhudsonis',
 'Staurosirella_pinnata',
 'Epithemia_turgida',
 'Achnanthidium_druartii',
 'Cymbella_excisa_var_excisa',
 'Achnanthidium_jackii',
 'Puncticulata_radiosa',
 'Achnanthidium_atomoides',
 'Reimeria_sinuata',
 'Cyclostephanos_dubius',
 'Achnanthidium_pyrenaicum',
 'Nitzschia_soratensis',
 'Achnanthidium_eutrophilum',
 'Melosira_varians',
 'Nitzschia_paleacea',
 'Cymbella_excisa_var_angusta',
 'Navicula_cryptotenella',
 'Fragments',
 'Gomphonema_parvulum_f_saprophilum',
 'Encyonema_ventricosum',
 'Nitzschia_dissipata_var_dissipata',
 'Karayevia_clevei_var_clevei',
 'Skeletonema_potamos',
 'Navicula_notha',
 'Nitzschia_costei',
 'Pseudostaurosira_subsalina',
 'Mayamaea_permitis',
 'Eolimna_subminuscula',
 'Gomphonema_insigniforme',
 'Encyonema_reichardtii',
 'Nitzschia_fonticola',
 'Tabellaria_flocculosa',
 'Nitzschia_capitellata',
 'Denticula_tenuis',
 'Nitzschia_palea_var_palea',
 'Fragilaria_gracilis',
 'Gomphonema_angustivalva',
 'Thalassiosira_pseudonana',
 'Nitzschia_inconspicua',
 'Nitzschia_dissipata_var_media',
 'Luticola_goeppertiana',
 'Humidophila_contenta',
 'Navicula_lanceolata',
 'Cymbella_excisiformis_var_excisiformis',
 'Encyonopsis_alpina',
 'Encyonopsis_minuta',
 'Stephanodiscus_neoastraea',
 'Cymbella_parva',
 'Gomphonema_rhombicum',
 'Navicula_capitatoradiata',
 'Cocconeis_lineata',
 'Planothidium_frequentissimum',
 'Gomphonema_angustatum',
 'Rhoicosphenia_abbreviata',
 'Diatoma_moniliformis',
 'Discostella_pseudostelligera',
 'Fragilaria_rumpens',
 'Eolimna_rhombelliptica',
 'Diatoma_mesodon',
 'Epithemia_sorex',
 'Encyonema_minutum',
 'Stephanodiscus_hantzschii',
 'Staurosira_binodis',
 'Pseudostaurosira_elliptica',
 'Cocconeis_placentula_var_euglypta',
 'Gomphonema_pumilum_var_elegans',
 'Fragilaria_arcus',
 'Nitzschia_desertorum',
 'Eolimna_minima',
 'Cyclotella_meneghiniana',
 'Nitzschia_amphibia',
 'Fragilaria_perminuta',
 'Achnanthidium_minutissimum',
 'Fragilaria_pararumpens',
 'Diatoma_vulgaris',
 'Navicula_cryptotenelloides',
 'Navicula_tripunctata',
 'Planothidium_lanceolatum',
 'Encyonema_silesiacum',
 'Craticula_accomoda',
 'Debris',
 'Gomphonema_minusculum',
 'Gomphonema_minutum',
 'Nitzschia_fossilis',
 'Fragilaria_vaucheriae',
 'Navicula_gregaria']
def get_train_data(direct):
    data = []
    for labels in category:
        path = os.path.join(direct, labels)
        class_num = category.index(labels)
        for img in os.listdir(path):
            try:
                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_COLOR)
                new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
                data.append([new_array, class_num])
            except Exception as e:
                print(e)
    return np.array(data)

new_data = get_train_data("../input/aquamicrobe/Aqualitas_100taxa")

X = []
y = []
for feature, label in new_data:
    X.append(feature)
    y.append(label)
    
from keras.utils import np_utils
y = np_utils.to_categorical(y, num_classes = 102)

X = np.array(X)
y = np.array(y)

X = X.reshape(-1, 64, 64, 3)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

X.shape

from keras.preprocessing.image import ImageDataGenerator

train_generator = ImageDataGenerator(rescale = 1/255,
                                     zoom_range = 0.3,
                                     horizontal_flip = True,
                                     rotation_range = 30)

test_generator = ImageDataGenerator(rescale = 1/255)

train_generator = train_generator.flow(np.array(X_train),
                                       y_train,
                                       batch_size = 64,
                                       shuffle = False)

test_generator = test_generator.flow(np.array(X_test),
                                     y_test,
                                     batch_size = 64,
                                     shuffle = False)

foldernames = os.listdir('../input/aquamicrobe/Aqualitas_100taxa')
categories = []
files = []
direct=[]
fol=[]
folder=[]
i = 0
for k, folder in enumerate(foldernames):
    filenames = os.listdir("../input/aquamicrobe/Aqualitas_100taxa"+ "/" + folder);
    for file in filenames:
        direct.append("../input/aquamicrobe/Aqualitas_100taxa"+ "/" + folder)
        fol.append(folder)
        files.append("../input/aquamicrobe/Aqualitas_100taxa"+ "/"  + folder + "/" + file)
        categories.append(k)
        
df = pd.DataFrame({
    'Class': fol,
    'Folder': direct,
    'filename': files,
    'category': categories
})
train_df = pd.DataFrame(columns=['Folder','filename','Class', 'category'])
for i in range(102):
    train_df = train_df.append(df[df.category == i].iloc[:500,:])

train_df.head()
train_df = train_df.reset_index(drop=True)
train_df

print("Size of each Class\n")
for i in set(train_df['Class']):
    print("Size of",i,": ",len("../input/aquamicrobe/Aqualitas_100taxa"+ "/" + i))
    x+=len("../input/aquamicrobe/Aqualitas_100taxa"+ "/" + i)



